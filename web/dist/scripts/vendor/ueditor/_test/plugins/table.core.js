function getTable(t){var d=document.getElementById("testTable");return d||(d=document.createElement("div"),d.id="testTable",document.body.appendChild(d)),d.innerHTML="<table border='1'>"+t+"</table>",d.firstChild}UT=UE.UETable,test("create UETable",function(){var t=getTable("<tr><td>ddd</td></tr>"),d=new UT(t);ok(d.table===t,"UT对象创建成功"),ok(1==d.colsNum&&1==d.rowsNum,"单元格行、列数为1")}),test("getMaxRows",function(){var t=getTable("<tr><td>1</td><td>2</td><td>3</td></tr><tr><td>1</td><td>2</td><td>3</td></tr>"),d=new UT(t),e=d.getMaxRows();equal(e,2,"最大行数为2"),t=getTable("<tr><td rowspan='3'>1</td><td>2</td><td rowspan='2'>3</td></tr><tr><td>2</td></tr>"),d=new UT(t),e=d.getMaxRows(),equal(e,3,"最大行数为3")}),test("getMaxCols",function(){var t=getTable("<tr><td>1</td><td>2</td><td>3</td></tr><tr><td>1</td><td>2</td><td>3</td></tr>"),d=new UT(t),e=d.getMaxCols();equal(e,3,"最大列数为3"),t=getTable("<tr><td rowspan='3'>1</td><td>2</td><td rowspan='2'>3</td></tr><tr><td>2</td><td colspan='3'></td></tr>"),d=new UT(t),e=d.getMaxCols(),equal(e,6,"最大列数为6")}),test("ie9 active trace 3728 getSameEndPosCells",function(){if(!(ua.browser.ie>9)){var t=getTable("<tr><td rowspan='2'>1</td><td>2</td><td>3</td></tr><tr><td>2</td><td>3</td></tr>"),d=new UT(t),e=t.rows[0].cells[0],l=d.getSameEndPosCells(e,"x"),r=d.getSameEndPosCells(e,"y");ok(1==l.length,"获取到同样X轴结尾位置的cell1个"),ok(2==r.length,"获取到同样Y轴结尾位置的cell2个")}}),test("getHSideCell",function(){var t=getTable("<tr><td rowspan='2'>1</td><td>2</td><td>3</td></tr><tr><td>2</td><td>3</td></tr>"),d=new UT(t),e=t.rows,l=e[1].cells[1],r=d.getHSideCell(l),s=d.getHSideCell(l,!0);equal(r,e[1].cells[0],"左边单元格"),equal(s,null,"位于右边缘的单元格无右邻居单元格"),equal(d.getHSideCell(e[0][0]),null,"位于左边缘的单元格无左邻居单元格")}),test("getVSideCell",function(){var t=getTable("<tr><td rowspan='2'>1</td><td>2</td><td>3</td></tr><tr><td>2</td><td>3</td></tr>"),d=new UT(t),e=t.rows,l=e[1].cells[1],r=d.getVSideCell(l),s=d.getVSideCell(l,!0),o=d.getVSideCell(l,!0,!0);equal(r,e[0].cells[2],"上边单元格"),equal(s,null,"位于下边缘的单元格无下邻居单元格"),equal(o,null,"位于左边缘的单元格无左邻居单元格")}),test("setCellContent",function(){var t=getTable("<tr><td rowspan='2'>1</td><td>2</td><td>3</td></tr><tr><td>2</td><td>3</td></tr>"),d=new UT(t),e=t.rows[0].cells[0];d.setCellContent(e,"这是测试内容"),equal(e.innerHTML,"这是测试内容","设置了正确的内容"),d.setCellContent(e),equal(e.innerHTML,browser.ie?domUtils.fillChar:"<br>")}),test("cloneCell",function(){var t=getTable("<tr><td style='border-top-color: red;border-bottom-color: green' rowspan='2'>1</td><td>2</td><td>3</td></tr><tr><td class='selectedClass'>2</td><td>3</td></tr>"),d=new UT(t),e=d.cloneCell(t.rows[0].cells[0]);equal(e.rowSpan,2,"clone了一个2行一列的单元格"),equal(e.style.borderTopColor,"green","上边框的颜色将会被下边框取代"),e=d.cloneCell(t.rows[0].cells[0],!0),ok(e.rowSpan,1,"忽略被合并单元格时将会充值单元格的rowspan和colspan为1")}),test("getCellsRange、getCells",function(){var t=getTable("<tr><td rowspan='2'>1</td><td>2</td><td>3</td></tr><tr><td class='selectedClass'>2</td><td>3</td></tr>"),d=new UT(t),e=d.getCellsRange(t.rows[0].cells[1],t.rows[1].cells[0]);ok(0===e.beginRowIndex&&1===e.beginColIndex&&1===e.endRowIndex&&1===e.endColIndex,"获取到range");var l=d.getCells(e);ok(2==l.length,"获取到2个单元格"),ok(l[0]==t.rows[0].cells[1],"第一个单元格存在")}),test("insertRow、deleterRow",function(){var t=getTable("<tr><td rowspan='2'>1</td><td>2</td><td>3</td></tr><tr><td class='selectedClass'>2</td><td>3</td></tr>"),d=new UT(t),e=document.createElement("td");e.innerHTML="aa",e.setAttribute("vAlign","top"),d.insertRow(2,e),ok(3===t.rows.length,"行数变成3行"),ok("top"==t.rows[2].cells[0].getAttribute("vAlign"),"新插入的单元格中包含原型单元格中的属性")}),test("mergeRight,mergeDown",function(){var t=getTable("<tr><td rowspan='3'>1</td><td>2</td><td>3</td><td rowspan='2'>4</td><td>5</td><td>6</td></tr><tr><td>2</td><td>3</td><td>5</td><td>6</td></tr><tr><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td></tr>"),d=new UT(t),e=t.rows[0].cells[1];d.mergeDown(e),ok(2===e.rowSpan,"向下合并成功"),d.mergeDown(e),ok(3===e.rowSpan,"向下合并成功"),e=e.previousSibling,d.mergeRight(e),ok(3===e.rowSpan&&2===e.colSpan,"向右合并成功"),equal(e.parentNode.rowIndex,0,"合并到了正确的位置")}),test("mergeRange",function(){var t=getTable("<tr><td rowspan='3'>1</td><td>2</td><td>3</td><td rowspan='2'>4</td><td>5</td><td>6</td></tr><tr><td>2</td><td>3</td><td>5</td><td>6</td></tr><tr><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td></tr>"),d=new UT(t),e=d.getCellsRange(t.rows[0].cells[1],t.rows[2].cells[3]);d.setSelected(e),d.mergeRange(),ok(3===t.rows[0].cells[1].rowSpan,"合并选区")}),test("split",function(){var t=getTable("<tr><td rowspan='3'>1</td><td>2</td><td>3</td><td rowspan='2' colspan='2'>4</td><td>6</td><td>7</td></tr><tr><td>2</td><td>3</td><td>6</td><td>7</td></tr><tr><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr>"),d=new UT(t),e=t.rows[0].cells[0],l=t.getElementsByTagName("td").length;d.splitToCells(e),ok(1==e.rowSpan&&1==e.colSpan,"单元格被成功拆分");var r=t.getElementsByTagName("td").length;ok(l+2==r,"单元格数量增加了2个"),e=t.rows[0].cells[3],d.splitToCols(e),ok(1===e.colSpan&&2==e.rowSpan,"被拆分成了2列")}),test("selectRow",function(){var t=getTable("<tr><td rowspan='3'>1</td><td>2</td><td>3</td><td rowspan='2' colspan='2'>4</td><td>6</td><td>7</td></tr><tr><td>2</td><td>3</td><td>6</td><td>7</td></tr><tr><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr>"),d=new UT(t);d.selectRow(1),equal(d.selectedTds.length,t.getElementsByTagName("td").length,"选中了所有单元格");var e=t.rows[1].cells,l=!1;utils.each(e,function(t){""==t.className&&(l=!0)}),ok(!l,"所有单元格都被选中"),ok(0===d.cellsRange.beginRowIndex,"cellsRange正确")}),test("selectTable",function(){var t=getTable("<tr><td rowspan='3'>1</td><td>2</td><td>3</td><td rowspan='2' colspan='2'>4</td><td>6</td><td>7</td></tr><tr><td>2</td><td>3</td><td>6</td><td>7</td></tr><tr><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr>"),d=new UT(t);d.selectTable(),ok(d.selectedTds.length===t.getElementsByTagName("td").length,"选中了整个表格")}),test("setBackground",function(){var t=getTable("<tr><td>01</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>11</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>21</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr>"),d=new UT(t);d.setBackground(t.getElementsByTagName("td"),"green");var e=t.rows[1].cells[1];ok("green"==e.style.backgroundColor,"单种背景颜色设置成功"),d.removeBackground(t.getElementsByTagName("td")),ok(""==e.style.backgroundColor,"背景颜色被清除"),d.setBackground(t.getElementsByTagName("td"),{repeat:!0,colorList:["green","red"]}),ok("green"==t.rows[0].cells[0].style.backgroundColor,"第一行的单元格为绿色"),ok("red"==t.rows[1].cells[0].style.backgroundColor,"第二行的单元格为红色"),ok("green"==t.rows[2].cells[0].style.backgroundColor,"第三行的单元格为绿色"),d.removeBackground(t.getElementsByTagName("td")),d.setBackground(t.getElementsByTagName("td"),{repeat:!1,colorList:["green","red"]}),ok("green"==t.rows[0].cells[0].style.backgroundColor,"第一行的单元格为绿色"),ok("red"==t.rows[1].cells[0].style.backgroundColor,"第二行的单元格为红色"),ok(""==t.rows[2].cells[0].style.backgroundColor,"第三行的单元格没有颜色")}),test("isFullRow isFullCol",function(){var t=getTable("<tr><td>01</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>11</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>21</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr>"),d=new UT(t),e=d.getCellsRange(t.rows[0].cells[0],t.rows[1].cells[1]);d.setSelected(e),ok(!d.isFullRow(),"不是整行"),e=d.getCellsRange(t.rows[0].cells[0],t.rows[0].cells[5]),d.setSelected(e),ok(d.isFullRow(),"是整行"),e=d.getCellsRange(t.rows[0].cells[0],t.rows[2].cells[0]),d.setSelected(e),ok(d.isFullCol(),"是整列"),e=d.getCellsRange(t.rows[0].cells[0],t.rows[1].cells[0]),d.setSelected(e),ok(!d.isFullCol(),"不是整列")}),test("last",function(){var t=getTable("<tr><td>01</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>11</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>21</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr>"),d=new UT(t),e=t.rows[2].cells[5];ok(d.isLastCell(e),"是最后一个单元格"),ok(!d.isLastCell(t.rows[1].cells[0]),"不是最后一个单元格")}),test("getNextCell",function(){var t=getTable("<tr><td>01</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>11</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>21</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr>"),d=new UT(t),e=t.rows[2].cells[5],l=d.getNextCell(e);ok(l===t.rows[1].cells[5],"找到正确单元格"),e=t.rows[0].cells[4],l=d.getNextCell(e),ok(!l,"顶行不存在nextCell"),l=d.getNextCell(e,!0),ok(l===t.rows[1].cells[4],"获取到下一行的单元格")}),test("getPreviewCell",function(){var t=getTable("<tr><td>01</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>11</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>21</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr>"),d=new UT(t),e=t.rows[2].cells[5],l=d.getPreviewCell(e);ok(l===e.previousSibling,"找到前置单元格")}),test("getLastCell",function(){var t=getTable("<tr><td>01</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>11</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>21</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr>"),d=new UT(t),e=d.getLastCell();ok(e===t.rows[2].cells[5],"找到最后一个单元格")}),test("getTabNextCell",function(){var t=getTable("<tr><td>01</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>11</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr><tr><td>21</td><td>2</td><td>3</td><td>4</td><td>6</td><td>7</td></tr>"),d=new UT(t),e=t.rows,l=e[0].cells[0],r=d.getTabNextCell(l);ok(r===t.rows[0].cells[1],"找到最后一个单元格"),r=d.getTabNextCell(e[0].cells[5]),ok(r===t.rows[1].cells[0],"找到下一行的第一个单元格")});